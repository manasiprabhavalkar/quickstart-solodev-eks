AWSTemplateFormatVersion: "2010-09-09"
Description: "deploy the AWSQS::EKS::Cluster resource into CloudFormation registry"
Resources:

  RegisterTypeFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Timeout: 900
      Runtime: python3.7
      Handler: index.handler
      Role: !GetAtt RegisterTypeRole.Arn
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import logging
          import boto3
          from time import sleep

          def stabilize(token, cfn):
              p = cfn.describe_type_registration(RegistrationToken=token)
              while p['ProgressStatus'] == "IN_PROGRESS":
                  sleep(5)
                  p = cfn.describe_type_registration(RegistrationToken=token)
              if p['ProgressStatus'] == 'FAILED':
                  logging.error(p)
                  return cfnresponse.FAILED, p['TypeVersionArn']
              return cfnresponse.SUCCESS, p['TypeVersionArn']

          def register(cfn):
              response = cfn.register_type(
                  Type='RESOURCE',
                  TypeName='AWSQS::EKS::Cluster',
                  SchemaHandlerPackage="s3://jmmccon-qs-dev/awsqs-eks-cluster.zip",
                  LoggingConfig={"LogRoleArn": "${LogDeliveryRole.Arn}", "LogGroupName": "/AWSQS/EKS/Cluster"},
                  ExecutionRoleArn="${ExecutionRole.Arn}"
              )
              status, version_arn = stabilize(response['RegistrationToken'], cfn)
              cfn.set_type_default_version(Arn=version_arn)
              return status

          def handler(event, context):
              print(event)
              status = cfnresponse.SUCCESS
              try:
                  cfn = boto3.client('cloudformation')
                  if event['RequestType'] == 'Create':
                      status = register(cfn)
                  if event['RequestType'] == 'Update':
                      versions = cfn.list_type_versions(Type='RESOURCE', TypeName='AWSQS::EKS::Cluster')['TypeVersionSummaries']
                      if len(versions) == 10:
                          cfn.deregister_type(Arn=versions[0]['Arn'])
                      status = register(cfn)
                  if event['RequestType'] == 'Delete':
                      versions = cfn.list_type_versions(Type='RESOURCE', TypeName='AWSQS::EKS::Cluster')['TypeVersionSummaries']
                      for v in versions[:-1]:
                          cfn.deregister_type(Arn=v['Arn'])
                      cfn.deregister_type(Type='RESOURCE', TypeName='AWSQS::EKS::Cluster')
              except Exception:
                  logging.error('Unhandled exception', exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  cfnresponse.send(event, context, status, {}, None)
  RegisterType:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt RegisterTypeFunction.Arn
